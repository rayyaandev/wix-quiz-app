// SECTION COVER IMAGES
const sectionImages = [
  // Use your actual file paths or upload to an image host and replace these as needed
  "pexels-leonie-fahjen-20345-92870.jpg", // Section 1
  "pexels-yankrukov-8818751.jpg", // Section 2
  "pexels-mahmutyilmaz20-32948137.jpg", // Section 3
  "pexels-syd-trgt-335495720-31718987.jpg", // Section 4
  "pexels-ron-lach-10487218.jpg", // Section 5
  "pexels-thelazyartist-1253724.jpg", // Section 6
];

// SECTION INTROS
const sections = [
  {
    title: "Section 1: Who you are",
    image: sectionImages[0],
    intro: "Let's get started by learning a little bit about you.",
  },
  {
    title: "Section 2: Your cultural context",
    image: sectionImages[1],
    intro: "Culture shapes how we see the world. Let's explore your context.",
  },
  {
    title: "Section 3: Your values & beliefs",
    image: sectionImages[2],
    intro: "Your values and beliefs guide your travel choices and connections.",
  },
  {
    title: "Section 4: Your creativity & lifestyle",
    image: sectionImages[3],
    intro: "Express yourself! Share how you create, play, and live.",
  },
  {
    title: "Section 5: Your travel style",
    image: sectionImages[4],
    intro: "What kind of traveler are you? Let's find your unique style.",
  },
  {
    title: "Section 6: Your relaxation & recharge",
    image: sectionImages[5],
    intro: "Tell us how you unwind and recharge on your adventures.",
  },
];

// MAIN QUIZ QUESTIONS (EXAMPLE STRUCTURE — Expand with all your quiz questions as needed)
const questions = [
  // Section 1 Example
  {
    section: 0,
    type: "intro",
    title: "Discover your Traveler Archetype",
    intro:
      "This isn’t your average travel quiz.\n\nOver the next <b>5 - 10 minutes</b>, you'll move through six carefully designed sections that uncover your unique traveler archetype...<br><br>Let’s get into it.",
    button: "Lets go →",
  },
  {
    section: 0,
    type: "single",
    label: "Please select your age range",
    required: true,
    options: [
      { badge: "A", text: "24 & Under" },
      { badge: "B", text: "25 - 30" },
      { badge: "C", text: "30 - 40" },
      { badge: "D", text: "40 - 50" },
      { badge: "E", text: "50 - 60" },
      { badge: "F", text: "60+" },
    ],
  },
  {
    section: 0,
    type: "text",
    label: "Please enter your first and last name",
    required: true,
  },
  {
    section: 0,
    type: "scale",
    label: "What is your personality type?",
    required: true,
    min: 1,
    max: 10,
    leftLabel: "Introvert",
    midLabel: "Ambivert",
    rightLabel: "Extravert",
  },
  // Section 2 Example
  {
    section: 1,
    type: "multiselect",
    label: "What languages do you speak? Select all that may apply.",
    required: true,
    options: [
      "Arabic",
      "Bengali",
      "Cantonese",
      "Dutch",
      "English",
      "Farsi",
      "French",
      "German",
      "Greek",
      "Hausa",
      "Hebrew",
      "Hindi",
      "Igbo",
      "Italian",
      "Japanese",
      "Korean",
      "Mandarin",
      "Portuguese",
      "Punjabi",
      "Russian",
      "Spanish",
      "Swahili",
      "Tagalog",
      "Thai",
      "Turkish",
      "Urdu",
      "Vietnamese",
      "Yoruba",
      "Other",
    ],
  },
  {
    section: 1,
    type: "select",
    label: "What is your current relationship status?",
    required: true,
    helper:
      "Understanding your relationship status allows us to develop more intentional recommendations. Whether you're single and ready to mingle, married and seeking romance, in a relationship and looking to deepen your connection or happily solo!",
    options: [
      "Single - Not Looking",
      "Single - Looking",
      "In a relationship",
      "Married",
      "In an open relationship",
      "Widowed",
      "Divorced",
      "Other",
    ],
  },
  // Section 3 Example
  {
    section: 2,
    type: "tag-multiselect",
    label:
      "What factors are most important to you when meeting new people? Select all that may apply.",
    required: true,
    options: [
      { text: "Hometown", color: "option-orange" },
      { text: "Ethnicity", color: "option-purple" },
      { text: "Income", color: "option-yellow" },
      { text: "Language fluency", color: "option-yellow" },
      { text: "Occupation", color: "option-purple" },
      { text: "Religious affiliation", color: "option-orange" },
      { text: "Preferred social settings", color: "option-green" },
      { text: "Age", color: "option-pink" },
      { text: "Availability", color: "option-yellow" },
      { text: "Class", color: "option-yellow" },
      { text: "Cultural background", color: "option-green" },
      { text: "Education level", color: "option-blue" },
      { text: "Gender identity", color: "option-pink" },
      { text: "Hobbies", color: "option-blue" },
      { text: "Moral values", color: "option-green" },
      { text: "Music taste", color: "option-blue" },
      { text: "Political affiliation", color: "option-purple" },
      { text: "Sense of humor", color: "option-orange" },
      { text: "Sexual orientation", color: "option-yellow" },
      { text: "Substance use", color: "option-green" },
    ],
  },
  // Section 4 Example
  {
    section: 3,
    type: "single",
    label: "How important to you is... Humor",
    required: true,
    options: [
      { badge: "A", text: "A good sense of humor is essential" },
      { badge: "B", text: "I like laughing occasionally" },
      { badge: "C", text: "I don't mind people with no sense of humor" },
      { badge: "D", text: "I don't find much funny" },
    ],
  },
  // ...Add more questions for each section as needed
];

// --- Quiz State ---
let currentStep = 0; // 0 = intro, then questions in order
let answers = {};

// --- Helper: Render Progress Bar ---
function renderProgress(step, total) {
  // Don't show for intro or section covers, only on questions
  if (questions[step].type === "intro") return "";
  const percent = Math.round((step / (total - 1)) * 100);
  return `
      <div class="quiz-progress">
        <div class="quiz-progress-bar" style="width:${percent}%;"></div>
        <div class="quiz-progress-label">${percent}% complete</div>
      </div>
    `;
}

// --- Main Render Function ---
function renderQuizStep() {
  const root = document.getElementById("quiz-root");
  const step = questions[currentStep];
  let html = "";

  // Progress Bar
  html += renderProgress(currentStep, questions.length);

  // Back button (not on intro)
  if (currentStep > 0) {
    html += `<button class="quiz-back-btn" onclick="goBack()"><span class="arrow">&larr;</span>Back</button>`;
  }

  // Section cover screens (if type is intro)
  if (step.type === "intro") {
    html += `
        <div class="quiz-card" style="text-align:left;">
          <h1 class="quiz-label">${step.title}</h1>
          <div class="quiz-helper" style="margin-bottom:32px;">${step.intro}</div>
          <button class="quiz-begin-btn" onclick="goNext()">${step.button} <span class="arrow">&rarr;</span></button>
        </div>
      `;
    root.innerHTML = html;
    return;
  }

  // Question card
  html += `<div class="quiz-card">`;

  // Title/Label
  if (step.label) {
    html += `<div class="quiz-label">${step.label}${
      step.required ? ' <span style="color:#fff;font-size:1.1em">*</span>' : ""
    }</div>`;
  }

  // Helper/Description
  if (step.helper) {
    html += `<div class="quiz-helper">${step.helper}</div>`;
  }

  // Input type rendering
  html += `<div class="quiz-options">`;
  if (step.type === "single") {
    step.options.forEach((opt, i) => {
      const selected = answers[currentStep] === i ? "selected" : "";
      html += `<button class="quiz-option-btn ${selected}" onclick="selectSingle(${i})">
          <span class="option-badge">${opt.badge}</span> ${opt.text}
        </button>`;
    });
  }
  if (step.type === "scale") {
    html += `<div style="display:flex;gap:10px;">`;
    for (let i = step.min; i <= step.max; i++) {
      const selected = answers[currentStep] === i ? "selected" : "";
      html += `<button class="quiz-option-btn ${selected}" style="padding:10px 0 10px 0;min-width:38px;" onclick="selectScale(${i})">${i}</button>`;
    }
    html += `</div>
      <div style="display:flex;justify-content:space-between;margin-top:6px;font-size:0.98em;opacity:0.8;">
        <span>${step.leftLabel}</span>
        ${step.midLabel ? `<span>${step.midLabel}</span>` : ""}
        <span>${step.rightLabel}</span>
      </div>`;
  }
  if (step.type === "multiselect") {
    step.options.forEach((opt, i) => {
      const checked = (answers[currentStep] || []).includes(i);
      html += `<label style="display:flex;align-items:center;gap:10px;font-size:1.08em;margin-bottom:8px;">
          <input type="checkbox" onchange="toggleMulti(${i})" ${
        checked ? "checked" : ""
      } style="accent-color:#f1b94f;width:19px;height:19px;">
          ${opt}
        </label>`;
    });
  }
  if (step.type === "select") {
    html += `<select class="quiz-input" onchange="selectDropdown(this)">
        <option value="">Select...</option>
        ${step.options
          .map(
            (opt, i) =>
              `<option value="${i}" ${
                answers[currentStep] === i ? "selected" : ""
              }>${opt}</option>`
          )
          .join("")}
      </select>`;
  }
  if (step.type === "text") {
    html += `<input class="quiz-input" type="text" value="${
      answers[currentStep] || ""
    }" 
        oninput="typeText(this)" placeholder="Type your answer...">`;
  }
  if (step.type === "tag-multiselect") {
    // Tag input at top
    html += `<div class="quiz-tag-multiselect" id="tag-multiselect">`;
    const selected = answers[currentStep] || [];
    selected.forEach((idx) => {
      const tag = step.options[idx];
      html += `<span class="quiz-tag ${tag.color}">${tag.text}
          <button class="remove-x" onclick="removeTag(${idx}, event)">&times;</button>
        </span>`;
    });
    html += `</div>`;
    // All options below, disabled if already chosen
    step.options.forEach((opt, i) => {
      const already = selected.includes(i);
      html += `<button class="quiz-tag ${opt.color}" style="margin-bottom:8px;${
        already ? "opacity:0.4;pointer-events:none;" : ""
      }" onclick="addTag(${i})">${opt.text}</button>`;
    });
  }
  html += `</div>`; // quiz-options

  // Next button
  let nextDisabled = false;
  if (step.required) {
    if (step.type === "single" && answers[currentStep] == null)
      nextDisabled = true;
    if (step.type === "scale" && answers[currentStep] == null)
      nextDisabled = true;
    if (
      step.type === "multiselect" &&
      (!answers[currentStep] || answers[currentStep].length === 0)
    )
      nextDisabled = true;
    if (step.type === "select" && answers[currentStep] == null)
      nextDisabled = true;
    if (
      step.type === "text" &&
      (!answers[currentStep] || !answers[currentStep].trim())
    )
      nextDisabled = true;
    if (
      step.type === "tag-multiselect" &&
      (!answers[currentStep] || answers[currentStep].length === 0)
    )
      nextDisabled = true;
  }
  html += `<button class="quiz-next-btn" onclick="goNext()" ${
    nextDisabled ? "disabled" : ""
  }>Next <span class="arrow">&rarr;</span></button>`;

  html += `</div>`; // quiz-card

  root.innerHTML = html;
}

// --- Selection Functions ---
function selectSingle(idx) {
  answers[currentStep] = idx;
  renderQuizStep();
}
function selectScale(val) {
  answers[currentStep] = val;
  renderQuizStep();
}
function toggleMulti(idx) {
  if (!answers[currentStep]) answers[currentStep] = [];
  const arr = answers[currentStep];
  if (arr.includes(idx)) {
    answers[currentStep] = arr.filter((i) => i !== idx);
  } else {
    arr.push(idx);
  }
  renderQuizStep();
}
function selectDropdown(sel) {
  answers[currentStep] = sel.value === "" ? null : +sel.value;
  renderQuizStep();
}
function typeText(input) {
  answers[currentStep] = input.value;
  const nextButton = document.querySelector(".quiz-next-btn");
  if (nextButton) {
    nextButton.disabled = !(input.value && input.value.trim());
  }
}
function addTag(i) {
  if (!answers[currentStep]) answers[currentStep] = [];
  if (!answers[currentStep].includes(i)) {
    answers[currentStep].push(i);
    renderQuizStep();
  }
}
function removeTag(i, e) {
  e.stopPropagation();
  if (!answers[currentStep]) return;
  answers[currentStep] = answers[currentStep].filter((idx) => idx !== i);
  renderQuizStep();
}

// --- Navigation ---
function goNext() {
  if (currentStep < questions.length - 1) {
    currentStep++;
    renderQuizStep();
  } else {
    showResults();
  }
}
function goBack() {
  if (currentStep > 0) {
    currentStep--;
    renderQuizStep();
  }
}

// --- Results (placeholder) ---
function showResults() {
  document.getElementById("quiz-root").innerHTML = `
      <div class="quiz-card" style="text-align:center;">
        <h2 style="margin-bottom:18px;">Thank you for completing the quiz!</h2>
        <div style="font-size:1.13em;">Your responses have been recorded.</div>
      </div>
    `;
}

// --- INIT ---
renderQuizStep();
